name: Deploy DEV API

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  push:
    branches:
      - next
      - main
    paths:
      - 'package.json'
      - 'yarn.lock'
      - 'apps/api/**'
      - 'libs/dal/**'
      - 'libs/shared/**'
env:
  TF_WORKSPACE: novu-dev

jobs:
  test_api:
    strategy:
      matrix:
        name: ['novu/api-ee', 'novu/api']
    uses: ./.github/workflows/reusable-api-e2e.yml
    with:
      ee: ${{ contains (matrix.name,'ee') }}
      submodules: ${{ contains (matrix.name,'ee') }}
    secrets: inherit

  build_dev_image:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: test_api
    timeout-minutes: 80
    environment: Development
    strategy:
      matrix:
        name: [ 'novu/api-ee', 'novu/api' ]
    outputs:
      docker_image: ${{ steps.build-image.outputs.IMAGE }}
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: ${{ contains (matrix.name,'ee') }}
          token: ${{ secrets.SUBMODULES_TOKEN }}
      - uses: ./.github/actions/setup-project
      - uses: ./.github/actions/docker/build-api
        id: docker_build
        with:
          tag: dev
          push: 'true'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: ${{ matrix.name }}
          bullmq_secret: ${{ secrets.BULL_MQ_PRO_NPM_TOKEN }}

  deploy_dev_api:
    needs: build_dev_image
    uses: ./.github/workflows/reusable-app-service-deploy.yml
    secrets: inherit
    with:
      environment: Development
      service_name: api
      terraform_workspace: novu-dev
      # This is a workaround to an issue with matrix outputs
      docker_image: ghcr.io/novuhq/novu/api-ee:${{ github.sha }}

  newrelic:
    runs-on: ubuntu-latest
    name: New Relic Deploy
    needs: deploy_dev_api
    environment: Development
    steps:
      # This step builds a var with the release tag value to use later
      - name: Set Release Version from Tag
        run: echo "RELEASE_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      # This step creates a new Change Tracking Marker
      - name: New Relic Application Deployment Marker
        uses: newrelic/deployment-marker-action@v2.3.0
        with:
          region: EU
          apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
          guid: "MzgxMjQwOHxBUE18QVBQTElDQVRJT058NDk3NjQzODIy"
          version: "${{ env.RELEASE_VERSION }}"
          user: "${{ github.actor }}"
