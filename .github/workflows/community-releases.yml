name: Docker Community Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to tag docker images'
        required: true
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 80
    environment: Production
    permissions:
      contents: read
      packages: write
      deployments: write
    steps:
      - uses: actions/checkout@v4

  docker_build_api:
    runs-on: ubuntu-latest
    needs: prepare
    timeout-minutes: 80
    environment: Development
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write
    strategy:
      matrix:
        name: ['novu/api-ee', 'novu/api']
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: ${{ contains (matrix.name,'-ee') }}
          token: ${{ secrets.SUBMODULES_TOKEN }}
      - uses: ./.github/actions/setup-project
        with:
          submodules: ${{ contains (matrix.name,'-ee') }}

      - uses: ./.github/actions/docker/build-api
        id: docker_build
        with:
          tag: ${{ inputs.version }}
          push: 'true'
          github_token: ${{ secrets.GH_PACKAGES }}
          docker_name: ${{ matrix.name }}
          bullmq_secret: ${{ secrets.BULL_MQ_PRO_NPM_TOKEN }}
          environment: dev

  docker_build_worker:
    runs-on: ubuntu-latest
    needs: prepare
    timeout-minutes: 80
    environment: Production
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write
    strategy:
      matrix:
        name: ['novu/worker-ee', 'novu/worker']
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: ${{ contains (matrix.name,'-ee') }}
          token: ${{ secrets.SUBMODULES_TOKEN }}
      - uses: ./.github/actions/setup-project
        with:
          submodules: ${{ contains (matrix.name,'-ee') }}

      - uses: ./.github/actions/docker/build-worker
        id: docker_build
        with:
          tag: ${{ inputs.version }}
          push: 'true'
          github_token: ${{ secrets.GH_PACKAGES }}
          docker_name: ${{ matrix.name }}
          bullmq_secret: ${{ secrets.BULL_MQ_PRO_NPM_TOKEN }}
          environment: dev

  docker_build_embed:
    needs: prepare
    uses: ./.github/workflows/reusable-docker.yml
    with:
      environment: Production
      package_name: novu/embed
      project_path: libs/embed
      local_tag: novu-embed
      env_tag: ${{ inputs.version }}
    secrets: inherit

  docker_build_inbound_mail:
    needs: prepare
    uses: ./.github/workflows/reusable-docker.yml
    with:
      environment: Production
      package_name: novu/inbound-mail
      local_tag: novu-inbound-mail
      env_tag: ${{ inputs.version }}
    secrets: inherit

  docker_build_web:
    needs: prepare
    uses: ./.github/workflows/reusable-docker.yml
    with:
      environment: Production
      package_name: novu/web
      project_path: apps/web
      local_tag: novu-web
      env_tag: ${{ inputs.version }}
    secrets: inherit

  docker_build_webhook:
    needs: prepare
    uses: ./.github/workflows/reusable-docker.yml
    with:
      environment: Production
      package_name: novu/webhook
      project_path: apps/webhook
      test_port: 1341
      health_check: true
      local_tag: novu-webhook
      env_tag: ${{ inputs.version }}
    secrets: inherit

  docker_build_widget:
    needs: prepare
    uses: ./.github/workflows/reusable-docker.yml
    with:
      environment: Production
      package_name: novu/widget
      project_path: apps/widget
      local_tag: novu-widget
      env_tag: ${{ inputs.version }}
    secrets: inherit

  docker_build_ws:
    needs: prepare
    uses: ./.github/workflows/reusable-docker.yml
    with:
      environment: Production
      package_name: novu/ws
      project_path: apps/ws
      local_tag: novu-ws
      env_tag: ${{ inputs.version }}
    secrets: inherit
