name: Release App
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (prod, dev)'
        required: true
        default: 'dev'
  push:
    branches:
      - next
      - prod

jobs:
  pre-release:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setenv.outputs.envvalue }}
      name: ${{ steps.env_name.outputs.env_Name }}
    steps:
      - uses: actions/checkout@v4
      - name: Set environment name

        id: env_name
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/next" ]]; then
            echo "::set-output name=env_Name::Dev";
          elif [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "::set-output name=env_name::Prod";
          fi

      - name: Check branch and set environment
        id: setenv
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/next" ]]; then
            envvalue="dev"
          else
            envvalue="prod"
          fi
          echo "::set-output name=environvalue::$environvalue"    
      

      - name: Start Deployment Notification
        uses: ravsamhq/notify-slack-action@v2
        with:
          notification_title: "Release has started for ${{ steps.env_name.outputs.env }} "
        env:
          SLACK_WEBHOOK_URL: ${{ inputs.slackWebhookURL }}

  release-api:
    uses: ./.github/workflows/cloud-deploy-api.yml
    needs: [pre-release]
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write
    with:
      env: ${{ needs.pre-release.outputs.environment }}

  release-embed:
    uses: ./.github/workflows/cloud-deploy-embed.yml
    needs: [pre-release]
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-dev-inbound-mail:
    uses: ./.github/workflows/cloud-deploy-dev-inbound-mail.yml
    needs: [ pre-release ]
    if: github.ref == 'refs/heads/next' || github.event.inputs.environment == 'dev'
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-web:
    uses: ./.github/workflows/cloud-deploy-web.yml
    needs: [pre-release]
    secrets: inherit
    with:
      env: ${{ needs.pre-release.outputs.environment }}
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-web-components:
    uses: ./.github/workflows/cloud-deploy-web-components.yml
    needs: [pre-release]
    secrets: inherit
    with:
      env: ${{ needs.pre-release.outputs.environment }}
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-dev-webhook:
    uses: ./.github/workflows/cloud-deploy-dev-webhook.yml
    needs: [pre-release]
    if: github.ref == 'refs/heads/next' || github.event.inputs.environment == 'dev'
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-dev-widget:
    uses: ./.github/workflows/cloud-deploy-dev-widget.yml
    needs: [pre-release]
    if: github.ref == 'refs/heads/next' || github.event.inputs.environment == 'dev'
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-dev-worker:
    uses: ./.github/workflows/cloud-deploy-dev-worker.yml
    needs: [pre-release]
    if: github.ref == 'refs/heads/next' || github.event.inputs.environment == 'dev'
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-dev-ws:
    uses: ./.github/workflows/cloud-deploy-dev-ws.yml
    needs: [pre-release]
    if: github.ref == 'refs/heads/next' || github.event.inputs.environment == 'dev'
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  post-release:
    if: ${{ always() }}
    needs: [
      release-api,
      release-embed,
      release-dev-inbound-mail,
      release-web,
      release-web-components,
      release-dev-webhook,
      release-dev-widget,
      release-dev-worker,
      release-dev-ws
    ]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy API Documentation
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.API_DOCS_BUILD_WEBHOOK }}
          method: 'POST'

      - name: Failed Deployment Notification
        if: ${{ failure() }}   # This step runs only if any of the previous jobs fail.
        uses: ravsamhq/notify-slack-action@v2
        with:
          notification_title: "Release has failed"
        env:
          SLACK_WEBHOOK_URL: ${{ inputs.slackWebhookURL }}


      - name: Success Deployment Notification
        if: ${{ success() }}   # This step runs only if all the previous jobs succeed.
        uses: ravsamhq/notify-slack-action@v2
        with:
          notification_title: "Release was successful"
        env:
          SLACK_WEBHOOK_URL: ${{ inputs.slackWebhookURL }}
