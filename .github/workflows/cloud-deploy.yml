name: Release App
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (prod, dev)'
        required: true
        default: 'dev'
  push:
    branches:
      - next
      - prod

jobs:
  pre-release:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setenv.outputs.envValue }}
      name: ${{ steps.setenvname.outputs.envName }}
    steps:
      - uses: actions/checkout@v4
      - name: Set environment name
        id: setenvname
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "::set-output name=envName::Prod"
          else
            echo "::set-output name=envName::Dev"
          fi

      - name: Check branch and set environment
        id: setenv
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "::set-output name=envValue::prod"   
          else
             echo "::set-output name=envValue::dev"
          fi

      - name: Check output values
        run: |
          echo "Environment Name: ${{ steps.setenvname.outputs.envName }}"
          echo "Environment Value: ${{ steps.setenv.outputs.envValue }}"
          if [ -z "${{ steps.setenvname.outputs.envName }}" ] || [ -z "${{ steps.setenv.outputs.envValue }}" ]; then
            echo "One of the required output values has not been set. Failing..."
            exit 1
          else
            echo "All output values have been set successfully."
          fi

      - name: Start Deployment Notification
        uses: ravsamhq/notify-slack-action@v2
        with:
          notification_title: "Release has started for ${{ steps.env_name.outputs.env }} "
        env:
          SLACK_WEBHOOK_URL: ${{ inputs.slackWebhookURL }}

  release-api:
    uses: ./.github/workflows/cloud-deploy-api.yml
    needs: [pre-release]
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write
    with:
      env: ${{ needs.pre-release.outputs.environment }}

  release-embed:
    uses: ./.github/workflows/cloud-deploy-embed.yml
    needs: [pre-release]
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write
    with:
      env: ${{ needs.pre-release.outputs.environment }}

  release-inbound-mail:
    uses: ./.github/workflows/cloud-deploy-inbound-mail.yml
    needs: [ pre-release ]
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-web:
    uses: ./.github/workflows/cloud-deploy-web.yml
    needs: [pre-release]
    secrets: inherit
    with:
      env: ${{ needs.pre-release.outputs.environment }}
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-web-components:
    uses: ./.github/workflows/cloud-deploy-web-components.yml
    needs: [pre-release]
    secrets: inherit
    with:
      env: ${{ needs.pre-release.outputs.environment }}
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-webhook:
    uses: ./.github/workflows/cloud-deploy-webhook.yml
    needs: [pre-release]
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-widget:
    uses: ./.github/workflows/cloud-deploy-widget.yml
    needs: [pre-release]
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-worker:
    uses: ./.github/workflows/cloud-deploy-worker.yml
    needs: [pre-release]
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  release-ws:
    uses: ./.github/workflows/cloud-deploy-ws.yml
    needs: [pre-release]
    secrets: inherit
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write

  post-release:
    if: ${{ always() }}
    needs: [
      release-api,
      release-embed,
      release-inbound-mail,
      release-web,
      release-web-components,
      release-webhook,
      release-widget,
      release-worker,
      release-ws
    ]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy API Documentation
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.API_DOCS_BUILD_WEBHOOK }}
          method: 'POST'

      - name: Failed Deployment Notification
        if: ${{ failure() }}   # This step runs only if any of the previous jobs fail.
        uses: ravsamhq/notify-slack-action@v2
        with:
          notification_title: "Release has failed"
        env:
          SLACK_WEBHOOK_URL: ${{ inputs.slackWebhookURL }}


      - name: Success Deployment Notification
        if: ${{ success() }}   # This step runs only if all the previous jobs succeed.
        uses: ravsamhq/notify-slack-action@v2
        with:
          notification_title: "Release was successful"
        env:
          SLACK_WEBHOOK_URL: ${{ inputs.slackWebhookURL }}
